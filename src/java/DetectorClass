package studio.actinic.games.demo;

import android.os.Environment;
import android.provider.FontsContract;
import android.provider.Settings;
import android.util.Log;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import org.opencv.imgproc.*;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.objdetect.Objdetect;

import java.io.File;
import java.io.IOError;
import java.util.concurrent.BlockingDeque;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * Created by Prashant on 2/9/2018.
 */

public class DetectorClass implements Runnable  {
    private Mat Data,temp_grey;
    volatile BlockingDeque<Mat> queue = new LinkedBlockingDeque<Mat>();
    volatile BlockingDeque<Mat> queue_grey = new LinkedBlockingDeque<Mat>();
    volatile BlockingDeque<Mat> outQueue = new LinkedBlockingDeque<Mat>();
    CascadeClassifier faceClass;
    CascadeClassifier paperWaste;
    CascadeClassifier wetWaste;
    Rect[] temp = new Rect[]{};
    volatile MatOfRect rectMat;
    volatile MatOfRect paper_mat;
    volatile MatOfRect wet_mat;
    double wastePert_tot;
    volatile double waste_area;
    Scalar color_RED = new Scalar(255,0,0);
    Scalar color_White = new Scalar(0,0,0);
    Scalar color_yellow = new Scalar(0,255,255);
    Scalar color_Green = new Scalar(0,0,255);
    private static final String TAG = "___DetectorClass___";
    static {
        System.loadLibrary("opencv_java3");
        //System.loadLibrary("opencv_core");
        //System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }
    DetectorClass()
    {
        rectMat = new MatOfRect();
        paper_mat = new MatOfRect();
        temp_grey = new Mat();
        wet_mat = new MatOfRect();
        wastePert_tot = 1920*1080;
        File face = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/home/class/haarcascade_frontalface_alt.xml");
        File paper = new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/home/class/paper_waste.xml");
        File wet = new File((Environment.getExternalStorageDirectory().getAbsolutePath()+"/home/class/wet_waste.xml"));
        if(face.exists() && paper.exists() && wet.exists()) {
            faceClass = new CascadeClassifier(face.getAbsolutePath());
            paperWaste = new CascadeClassifier(paper.getAbsolutePath());
            wetWaste = new CascadeClassifier(wet.getAbsolutePath());
            if(faceClass.load(face.getAbsolutePath()) && paperWaste.load(paper.getAbsolutePath()) && wetWaste.load(wet.getAbsolutePath()))
            {
                Log.d("__MainActivity__","Load SuccessFull");
            }
            else
            {
                Log.d("__MainActivity__","Load Failed");
            }
        }
        else
        {
            Log.d("__MainActivity__",face.getAbsolutePath()+"\n"+paper.getAbsolutePath());
            Log.d("__MainActivity__","FILE NOT Found");
        }
    }
    public synchronized void AddMat(Mat in)
    {
        Data = in;
    }
     protected void FaceClassify()
    {
        waste_area=0;
        //Imgproc.cvtColor(Data, temp_grey, Imgproc.COLOR_BGR2GRAY);
        faceClass.detectMultiScale(temp_grey, rectMat,1.32,1,2,new Size(300,300),new Size());//,1.0,3, Objdetect.CASCADE_DO_CANNY_PRUNING,new Size(40,40),new Size());
        paperWaste.detectMultiScale(temp_grey,paper_mat,1.2,1,2,new Size(100,100),new Size());
        wetWaste.detectMultiScale(temp_grey,wet_mat,1.1,1,0,new Size(200,200),new Size());
        temp = rectMat.toArray();
        Log.d(TAG,"Status of Det == > " + ((rectMat.empty())?"DETECT IS EMPTY":"FOUND SOMETHING"));
        for(int x=0;x<temp.length;x++)
        {
            waste_area+=temp[x].area();
            Imgproc.rectangle(Data,temp[x].br(),temp[x].tl(),color_RED,5);
            Imgproc.putText(Data,"This is a Recyclable Human",temp[x].tl(),1,3, color_yellow,3);
        }
        temp = paper_mat.toArray();
        for(int x = 0;x<temp.length;x++){
            waste_area+=temp[x].area();
            Imgproc.rectangle(Data,temp[x].br(),temp[x].tl(),color_White,5);
            Imgproc.putText(Data,"Dry Waste",temp[x].tl(),1,3, color_White,3);
        }
        temp = wet_mat.toArray();
        for (int x= 0;x<temp.length;x++)
        {
            waste_area+=temp[x].area();
            Imgproc.rectangle(Data,temp[x].br(),temp[x].tl(),color_Green,5);
            Imgproc.putText(Data,"Wet Waste",temp[x].tl(),1,3, color_Green,3);
        }
        Imgproc.putText(Data,"Total Waste : "+String.valueOf((int)((waste_area/wastePert_tot)*100))+"%",new Point(20,50),1,3, color_White,3);
        outQueue.offer(Data);
    }

    @Override
    public void run() {
        while (true) {
            try {
                Data = queue.take();
                temp_grey = queue_grey.take();
                if (Data != null) {
                    FaceClassify();
                }
                queue.clear();
                queue_grey.clear();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }

    final synchronized Mat _return_Mod()
    {
        return Data;
    }
}
